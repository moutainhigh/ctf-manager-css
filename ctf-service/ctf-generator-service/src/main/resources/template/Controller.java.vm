package ${packageName}.controller;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import ${packageName}.entity.${entityName};
import ${packageName}.service.${entityName}Service;
import ActionResult;
import ListResult;
import ResultBuilder;
import ExcelUtils;
import InsertValidator;
import UpdateValidator;

/**
 * 控制层
 */
@RestController
@RequestMapping("/${lowercaseEntityName}")
public class ${entityName}Controller {

	private final Logger logger = LoggerFactory.getLogger(getClass());

	@Autowired
	private ${entityName}Service ${lowercaseFirstOneEntityName}Service;

	/**
	 * 查询分页
	 *
	 * @param currentPage   当前页数
	 * @param pageSize      每页记录数
	 * @param name          名称
	 * @param sorter        排序
	 * @return
	 */
	@GetMapping(path = "/query${entityName}")
	public ListResult<Object> query${entityName}(@RequestParam(name = "currentPage", required = false, defaultValue = "1") Integer currentPage,
			@RequestParam(name = "pageSize", required = false, defaultValue = "10") Integer pageSize, @RequestParam(name = "name", required = false) String name,
			@RequestParam(name = "sorter", required = false) String sorter) {
		ListResult<Object> result = new ListResult<>();
		try {
			Map<String, Object> data = ${lowercaseFirstOneEntityName}Service.query${entityName}(currentPage, pageSize, name, sorter);
			ResultBuilder.buildListSuccess(result, data);
		} catch (Exception e) {
			ResultBuilder.buildListWarn(result, e);
		}
		return result;
	}

	/**
	 * 新增
	 *
	 * @param ${lowercaseFirstOneEntityName}
	 * @return
	 */
	@PostMapping(path = "/add${entityName}")
	public ActionResult add${entityName}(@Validated(InsertValidator.class) @RequestBody ${entityName} ${lowercaseFirstOneEntityName}) {
		ActionResult result = new ActionResult();
		try {
			${lowercaseFirstOneEntityName}Service.insert${entityName}(${lowercaseFirstOneEntityName});
			ResultBuilder.buildActionSuccess(result);
		} catch (Exception e) {
			ResultBuilder.buildActionWarn(result, e);
		}
		return result;
	}

	/**
	 * 编辑
	 *
	 * @param ${lowercaseFirstOneEntityName}
	 * @return
	 */
	@PutMapping(path = "/update${entityName}")
	public ActionResult update${entityName}(@Validated(UpdateValidator.class) @RequestBody ${entityName} ${lowercaseFirstOneEntityName}) {
		ActionResult result = new ActionResult();
		try {
			${lowercaseFirstOneEntityName}Service.update${entityName}(${lowercaseFirstOneEntityName});
			ResultBuilder.buildActionSuccess(result);
		} catch (Exception e) {
			ResultBuilder.buildActionWarn(result, e);
		}
		return result;
	}

	/**
	 * 删除
	 *
	 * @param id ID
	 * @return
	 */
	@PostMapping(path = "/delete${entityName}")
	public ActionResult delete${entityName}(@RequestParam(name = "id", required = true) Long[] id) {
		ActionResult result = new ActionResult();
		try {
			${lowercaseFirstOneEntityName}Service.delete${entityName}(id);
			ResultBuilder.buildActionSuccess(result);
		} catch (Exception e) {
			ResultBuilder.buildActionWarn(result, e);
		}
		return result;
	}

	/**
	 * 根据查询条件导出
	 *
	 * @param response 响应对象
	 * @param paramMap 参数Map
	 */
	@PostMapping(path = "/export${entityName}")
	public void export${entityName}(HttpServletResponse response, @RequestParam Map<String, Object> paramMap) {
		try {
			List<String> headList = Arrays.asList("ID",#foreach($item in ${fieldList}) ""#if($foreach.hasNext),#end#end);
			List<LinkedHashMap<String, Object>> dataList = ${lowercaseFirstOneEntityName}Service.query${entityName}ForExcel(paramMap);
			ExcelUtils.exportExcel(headList, dataList, "导出信息", response);
		} catch (Exception e) {
			logger.warn(e.toString());
		}
	}

}
